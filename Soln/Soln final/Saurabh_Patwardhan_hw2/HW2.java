/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;

import oracle.sdoapi.OraSpatialManager;
import oracle.sdoapi.adapter.GeometryAdapter;
import oracle.sdoapi.adapter.GeometryInputTypeNotSupportedException;
import oracle.sdoapi.geom.CoordPoint;
import oracle.sdoapi.geom.Geometry;
import oracle.sdoapi.geom.InvalidGeometryException;
import oracle.sql.STRUCT;


/**
 *
 * @author Saurabh
 */
public class HW2 extends javax.swing.JFrame implements ActionListener, MouseListener, MouseMotionListener {

    /**
     * Creates new form NewJFrame
     */
    public HW2() {

        ConnectToDB();
        initComponents();
        jLabel1.addMouseMotionListener(this);
        jLabel1.addMouseListener(this);
        jButton1.addActionListener(this);

        jRadioButton1.setActionCommand(Whole_Region);
        jRadioButton1.addActionListener(this);
        jRadioButton2.setActionCommand(Point_Query);
        jRadioButton2.addActionListener(this);
        jRadioButton3.setActionCommand(Range_Query);
        jRadioButton3.addActionListener(this);
        jRadioButton4.setActionCommand(Surrounding_Student);
        jRadioButton4.addActionListener(this);
        jRadioButton5.setActionCommand(Emergency_Query);
        jRadioButton5.addActionListener(this);

        polyPoints = new ArrayList<Integer>();
        this.addWindowListener(new WindowEventHandler());

        executedQueries = new ArrayList<String>();
    }
    HashMap globalHm;
    HashMap globalHm2;
    ArrayList polyPoints;
    int queryCounter = 0;
    Connection mainConnection = null;
    Statement mainStatement = null;
    ResultSet mainResultSet = null;
    ArrayList<String> executedQueries;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        as = new javax.swing.JCheckBox();
        buildings = new javax.swing.JCheckBox();
        students = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Saurabh Patwardhan USC ID- 2797 7717 50");

        jLabel1.setIcon(new javax.swing.ImageIcon("map.jpg")); // NOI18N
        jLabel1.setText("jLabel1");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        as.setText("AS");

        buildings.setText("Building");

        students.setText("Students");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(as)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buildings)
                        .addGap(18, 18, 18)
                        .addComponent(students)))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(as)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buildings)
                    .addComponent(students)))
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Active Feature Type");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Query");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Whole Region");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Point Query");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("Range Query");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("Surrounding Student");

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setText("Emergency Query");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton5)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Submit Query");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 22, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setText("Mouse Coordinates");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jButton1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HW2().setVisible(true);

            }
        });
    }

    private void drawFeatures(HashMap<String, ArrayList> hm) {
        if (students.isSelected()) {

            ArrayList<Student> studList = hm.get("students");
            if (studList != null && !studList.isEmpty()) {
                for (Student student : studList) {
                    drawStudent(student, Color.green);
                }
            }
        }
        if (as.isSelected()) {
            ArrayList<AnnouncementSystem> asList = hm.get("as");
            if (asList != null && !asList.isEmpty()) {
                for (AnnouncementSystem announcementSys : asList) {
                    drawAnnouncementSys(announcementSys, Color.red);
                }
            }
        }

        if (buildings.isSelected()) {
            ArrayList<Building> buildList = hm.get("buildings");
            if (buildList != null && !buildList.isEmpty()) {
                for (Building building : buildList) {
                    drawBuilding(building, Color.yellow);
                }
            }
        }
    }

    private void updateQueriesInTextArea(ArrayList<String> executedQueries) {
       for(String query:executedQueries)
        jTextArea1.append("\nQuery "+(++queryCounter)+" : "+query+";");
    }

    class WindowEventHandler extends WindowAdapter {

        public void windowClosing(WindowEvent evt) {
            CloseConnection();
            System.out.println("DB Disconnected...");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox as;
    private javax.swing.JCheckBox buildings;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JCheckBox students;
    // End of variables declaration//GEN-END:variables
    final String Whole_Region = "Whole_Region";
    final String Point_Query = "Point_Query";
    final String Range_Query = "Range_Query";
    final String Surrounding_Student = "Surrounding_Student";
    final String Emergency_Query = "Emergency_Query";
    int x, y, r;

    @Override
    public void mouseDragged(MouseEvent e) {
        jTextField1.setText("(X,Y) coordinates :: (" + e.getX() + "," + e.getY() + ")");
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        //  drawCirle(e.getX(),e.getY());
        jTextField1.setText("(X,Y) coordinates :: (" + e.getX() + "," + e.getY() + ")");

    }

    @Override
    public void actionPerformed(ActionEvent e) {
        clearMap(this);
        boolean checkSelected = buttonGroup1.getSelection() != null;
        if ("Submit Query".equals(e.getActionCommand()) && checkSelected) {
            
            String selectedRadioButton = buttonGroup1.getSelection().getActionCommand();
            if (Whole_Region.equals(selectedRadioButton)) {
                executedQueries.clear();
                HashMap<String, ArrayList> hm = WholeRegionQuery();

                drawFeatures(hm);
                updateQueriesInTextArea(executedQueries);              

            } else if (Point_Query.equals(selectedRadioButton)) {
                Graphics g = jLabel1.getGraphics();
                g.setColor(Color.red);
                g.fillRect(x - 3, y - 2, 5, 5);
                g.drawOval(x - 50, y - 50, r * 2, r * 2);
                executedQueries.clear();
                HashMap<String, ArrayList> hm = PointQuery(x, y, r);
                if (students.isSelected()) {
                    ArrayList<Student> studList = hm.get("students");

                    if (studList != null && !studList.isEmpty()) {
                        Student s = studList.remove(0);
                        drawStudent(s, Color.yellow);
                        for (Student student : studList) {
                            drawStudent(student, Color.green);
                        }
                    }
                }
                if (as.isSelected()) {
                    ArrayList<AnnouncementSystem> asList = hm.get("as");
                    if (asList != null && !asList.isEmpty()) {
                        AnnouncementSystem as = asList.remove(0);
                        drawAnnouncementSys(as, Color.yellow);
                        for (AnnouncementSystem announcementSys : asList) {
                            drawAnnouncementSys(announcementSys, Color.green);
                        }
                    }
                }

                if (buildings.isSelected()) {
                    ArrayList<Building> buildList = hm.get("buildings");
                    if (buildList != null && !buildList.isEmpty()) {
                        Building b = buildList.remove(0);
                        drawBuilding(b, Color.yellow);

                        for (Building building : buildList) {
                            drawBuilding(building, Color.green);
                        }
                    }
                }
                updateQueriesInTextArea(executedQueries);
            } else if (Range_Query.equals(selectedRadioButton)) {
                if (polyPoints != null && polyPoints.size() / 2 > 3) {
                    Graphics g = jLabel1.getGraphics();
                    g.setColor(Color.CYAN);
                    int noOfVertices = (polyPoints.size() / 2);
                    for (int i = 0; i < polyPoints.size() - 3 && noOfVertices > 1; i += 2) {
                        int x1 = (Integer) polyPoints.get(i);
                        int y1 = (Integer) polyPoints.get(i + 1);
                        int x2 = (Integer) polyPoints.get(i + 2);
                        int y2 = (Integer) polyPoints.get(i + 3);
                        g.drawLine(x1, y1, x2, y2);
                    }
                    int x1 = (Integer) polyPoints.get(0);
                    int y1 = (Integer) polyPoints.get(1);
                    int x2 = (Integer) polyPoints.get(polyPoints.size() - 2);
                    int y2 = (Integer) polyPoints.get(polyPoints.size() - 1);
                    g.drawLine(x1, y1, x2, y2);
                    executedQueries.clear();
                    HashMap<String, ArrayList> hm = RangeQuery(polyPoints);
                    drawFeatures(hm);
                    updateQueriesInTextArea(executedQueries);
                }
            } else if (Surrounding_Student.equals(selectedRadioButton)) {
                 ArrayList<AnnouncementSystem> asList = (ArrayList<AnnouncementSystem>) globalHm.get("asList");
            if (asList != null && !asList.isEmpty()) {
                drawAnnouncementSys(asList.get(0), Color.red);
            }
                ArrayList<Student> studList = (ArrayList<Student>) globalHm.get("studList");
                if (studList != null && !studList.isEmpty()) {
                    for (Student student : studList) {
                        drawStudent(student, Color.green);
                    }
                    updateQueriesInTextArea(executedQueries);
                }
                
            } else if (Emergency_Query.equals(selectedRadioButton)) {
                Color colors[] = {Color.BLUE, Color.GRAY, Color.magenta, Color.CYAN, Color.PINK, Color.white};
                int colorCount = 0;
                for (Object key : globalHm2.keySet()) {
                    HashMap tmpHm = (HashMap) globalHm2.get(key);
                    ArrayList<AnnouncementSystem> asList = (ArrayList<AnnouncementSystem>) tmpHm.get("nearestAnnouncementSystem");
                    drawAnnouncementSys(asList.get(0), Color.red);
					
                    asList = (ArrayList<AnnouncementSystem>) tmpHm.get("secondNearestAnnSys");
					if(asList!=null && !asList.isEmpty()){
                    drawAnnouncementSys(asList.get(0), colors[colorCount]);
                    ArrayList<Student> studList = (ArrayList<Student>) tmpHm.get("Students");
                    if (studList != null && !studList.isEmpty()) {
                        for (Student s : studList) {
                            drawStudent(s, colors[colorCount]);
                        }
                    }
                    colorCount++;
					}
                }


                ArrayList<Student> studList = (ArrayList<Student>) globalHm2.get("studList");
                if (studList != null && !studList.isEmpty()) {
                    for (Student student : studList) {
                        drawStudent(student, Color.green);
                    }
                }
                updateQueriesInTextArea(executedQueries);
            }


        } else {
            x = 0;
            y = 0;
            r = 0;
            clearMap(this);
            polyPoints.clear();
            executedQueries.clear();
        }
    }

    private void drawStudent(Student student, Color color) {
        Graphics g = jLabel1.getGraphics();
        g.setColor(color);
        g.fillRect((int) student.getXY().getX() - 5, (int) student.getXY().getY() - 5, 10, 10);
    }

    private void drawAnnouncementSys(AnnouncementSystem announcementSys, Color color) {
        Graphics g = jLabel1.getGraphics();
        g.setColor(color);
        g.fillRect((int) announcementSys.getX() - 8, (int) announcementSys.getY() - 7, 15, 15);
        g.drawOval((int) announcementSys.getX() - announcementSys.getR(), (int) announcementSys.getY() - announcementSys.getR(), announcementSys.getR() * 2, announcementSys.getR() * 2);

    }

    private void drawBuilding(Building building, Color color) {

        int noOfPoints = 0;
        double[] coords = building.getCoords();
        int xPoints[] = new int[coords.length];
        int yPoints[] = new int[coords.length];
        for (int i = 0; i < coords.length; i += 2) {
            xPoints[noOfPoints] = (int) coords[i];
            yPoints[noOfPoints] = (int) coords[i + 1];
            noOfPoints++;
        }

        Graphics g = jLabel1.getGraphics();
        g.setColor(color);
        g.drawPolygon(xPoints, yPoints, noOfPoints);
    }

    private void clearMap(HW2 aThis) {
        Graphics g = this.getGraphics();
        super.paintComponents(g);
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        if (jRadioButton2.isSelected()) {
            clearMap(this);
            Graphics g = jLabel1.getGraphics();
            g.setColor(Color.red);
            x = e.getX();
            y = e.getY();
            r = 50;
            g.fillRect(x - 3, y - 2, 5, 5);
            g.drawOval(x - 50, y - 50, r * 2, r * 2);
        } else if (jRadioButton3.isSelected()) {
            //clearMap(this);
            Graphics g = jLabel1.getGraphics();
            g.setColor(Color.red);
            //system.out.println(e.getButton());
            if (e.getButton() == 3 && polyPoints.size() / 2 > 3) {
                int x1 = (Integer) polyPoints.get(0);
                int y1 = (Integer) polyPoints.get(1);
                int x2 = (Integer) polyPoints.get(polyPoints.size() - 2);
                int y2 = (Integer) polyPoints.get(polyPoints.size() - 1);
                g.drawLine(x1, y1, x2, y2);
            } else {

                polyPoints.add(e.getX());
                polyPoints.add(e.getY());
                int noOfVertices = (polyPoints.size() / 2);
                for (int i = 0; i < polyPoints.size() - 3 && noOfVertices > 1; i += 2) {
                    int x1 = (Integer) polyPoints.get(i);
                    int y1 = (Integer) polyPoints.get(i + 1);
                    int x2 = (Integer) polyPoints.get(i + 2);
                    int y2 = (Integer) polyPoints.get(i + 3);
                    g.drawLine(x1, y1, x2, y2);
                }
            }
        } else if (jRadioButton4.isSelected()) {
            clearMap(this);
            executedQueries.clear();
            globalHm = SurroundingStudentsQuery(e.getX(), e.getY());
            ArrayList<AnnouncementSystem> asList = (ArrayList<AnnouncementSystem>) globalHm.get("asList");
            if (asList != null && !asList.isEmpty()) {
                drawAnnouncementSys(asList.get(0), Color.red);
            }
        } else if (jRadioButton5.isSelected()) {
            clearMap(this);
            executedQueries.clear();
            globalHm2 = EmergencyQuery(e.getX(), e.getY());
            for (Object key : globalHm2.keySet()) {
                HashMap tmpHm = (HashMap) globalHm2.get(key);
                ArrayList<AnnouncementSystem> asList = (ArrayList<AnnouncementSystem>) tmpHm.get("nearestAnnouncementSystem");
                drawAnnouncementSys(asList.get(0), Color.red);
                break;
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    public HashMap<String, HashMap> EmergencyQuery(int xCoord, int yCoord) {

        //int xCoord=450,yCoord=350;
        String sdo_Geom = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + xCoord + "," + yCoord + ",NULL),NULL,NULL)";
        String nearbyAnnouncementSysQuery = "SELECT as_id,x,y,r,as_circle,SDO_NN_DISTANCE(1) FROM announcement_systems WHERE "
                + "SDO_NN(AS_CIRCLE," + sdo_Geom + ",'sdo_num_res=1',1) = 'TRUE' ORDER BY SDO_NN_DISTANCE(1)";
        HashMap<String, HashMap> mainHm = new HashMap<String, HashMap>();
        try {

            mainResultSet = mainStatement.executeQuery(nearbyAnnouncementSysQuery);
            executedQueries.add(nearbyAnnouncementSysQuery);
            ArrayList<AnnouncementSystem> asList = getAnnouncementSystems();
            //mainHm.put("nearestAnnouncementSys", asList);
            String nearestAnnouncementSys = asList.get(0).getAs_id();
            AnnouncementSystem nearestAnnouncementSystem = asList.get(0);
            HashMap<String, ArrayList> hm = SurroundingStudentsQuery(xCoord, yCoord);
            ArrayList<Student> studList = hm.get("studList");
            for (Student s : studList) {
                sdo_Geom = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + s.getXY().getX() + "," + s.getXY().getY() + ",NULL),NULL,NULL)";
                nearbyAnnouncementSysQuery = "SELECT as_id,x,y,r,as_circle,SDO_NN_DISTANCE(1) FROM announcement_systems WHERE "
                        + "SDO_NN(AS_CIRCLE," + sdo_Geom + ",'sdo_num_res=2',1) = 'TRUE' ORDER BY SDO_NN_DISTANCE(1)";

                mainResultSet = mainStatement.executeQuery(nearbyAnnouncementSysQuery);
                executedQueries.add(nearbyAnnouncementSysQuery);
                //system.out.println("Nearby Announcement systems are:");
                asList = getAnnouncementSystems();
                String secondNearestAnnSys = "";
                double secondNearestdist;
                HashMap<String, ArrayList> tmpHm = new HashMap<String, ArrayList>();
                ArrayList tmpArrayList = new ArrayList();
                //get the second nearest Announcement System

                if (asList.get(0).getAs_id().equals(nearestAnnouncementSys)) {
                    secondNearestAnnSys = asList.get(1).getAs_id();
                    secondNearestdist = asList.get(1).getDistance();
                    if (mainHm.containsKey(secondNearestAnnSys)) {
                        tmpHm = mainHm.get(secondNearestAnnSys);
                        tmpArrayList = tmpHm.get("Students");
                        tmpArrayList.add(s);
                        tmpHm.put("Students", tmpArrayList);
                        mainHm.put(secondNearestAnnSys, tmpHm);
                    } else {
                        tmpHm = new HashMap<String, ArrayList>();
                        tmpArrayList = new ArrayList<Student>();
                        tmpArrayList.add(s);
                        tmpHm.put("Students", tmpArrayList);
                        tmpArrayList = new ArrayList<AnnouncementSystem>();
                        tmpArrayList.add(asList.get(1));
                        tmpHm.put("secondNearestAnnSys", tmpArrayList);
                        tmpArrayList = new ArrayList<AnnouncementSystem>();
                        tmpArrayList.add(nearestAnnouncementSystem);
                        tmpHm.put("nearestAnnouncementSystem", tmpArrayList);
                        mainHm.put(secondNearestAnnSys, tmpHm);
                    }
                } else {
                    secondNearestAnnSys = asList.get(0).getAs_id();
                    secondNearestdist = asList.get(0).getDistance();
                    if (mainHm.containsKey(secondNearestAnnSys)) {
                        tmpHm = mainHm.get(secondNearestAnnSys);
                        tmpArrayList = tmpHm.get("Students");
                        tmpArrayList.add(s);
                        tmpHm.put("Students", tmpArrayList);
                        mainHm.put(secondNearestAnnSys, tmpHm);
                    } else {
                        tmpHm = new HashMap<String, ArrayList>();
                        tmpArrayList = new ArrayList<Student>();
                        tmpArrayList.add(s);
                        tmpHm.put("Students", tmpArrayList);
                        tmpArrayList = new ArrayList<AnnouncementSystem>();
                        tmpArrayList.add(asList.get(0));
                        tmpHm.put("secondNearestAnnSys", tmpArrayList);
                        tmpArrayList = new ArrayList<AnnouncementSystem>();
                        tmpArrayList.add(nearestAnnouncementSystem);
                        tmpHm.put("nearestAnnouncementSystem", tmpArrayList);
                        mainHm.put(secondNearestAnnSys, tmpHm);
                    }
                }
                //system.out.println("Second Nearest Announcement System for " + s.getXY() + " is:" + secondNearestAnnSys + " with distance:" + secondNearestdist);
            }
			if(studList==null || studList.isEmpty()){
               HashMap<String, ArrayList>tmpHm = new HashMap<String, ArrayList>();
                        ArrayList tmpArrayList = new ArrayList<Student>();
                        tmpHm.put("Students", tmpArrayList);
                        tmpArrayList = new ArrayList<AnnouncementSystem>();
                        tmpArrayList.add(nearestAnnouncementSystem);
                        tmpHm.put("nearestAnnouncementSystem", tmpArrayList);
                        mainHm.put("abc", tmpHm);
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return mainHm;
    }

    public HashMap<String, ArrayList> SurroundingStudentsQuery(int xCoord, int yCoord) {
        //xCoord=400;
        //yCoord=350;
        //system.out.println("\n **** SurroundingStudents Queries Begin **** \n");
        String sdo_Geom = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + xCoord + "," + yCoord + ",NULL),NULL,NULL)";
        String nearbyAnnouncementSysQuery = "SELECT as_id,x,y,r,as_circle,SDO_NN_DISTANCE(1) FROM announcement_systems WHERE "
                + "SDO_NN(AS_CIRCLE," + sdo_Geom + ",'sdo_num_res=1',1) = 'TRUE' ORDER BY SDO_NN_DISTANCE(1)";
        //system.out.println("\nNearbyAnnouncementSysQuery:\n" + nearbyAnnouncementSysQuery);
        HashMap<String, ArrayList> hm = new HashMap<String, ArrayList>();
        try {
            mainResultSet = mainStatement.executeQuery(nearbyAnnouncementSysQuery);
            executedQueries.add(nearbyAnnouncementSysQuery);
            //system.out.println("Nearby Announcement systems are:");
            ArrayList<AnnouncementSystem> asList = getAnnouncementSystems();
            hm.put("asList", asList);
            //get the nearest Announcement System
            //system.out.println("Nearest Announcement System is:" + asList.get(0).getAs_id() + " with distance:" + asList.get(0).getDistance());

            int x = asList.get(0).getX();
            int y = asList.get(0).getY();
            int rad = asList.get(0).getR();
            int pt1x = x;
            int pt1y = y - rad;
            int pt2x = x + rad;
            int pt2y = y;
            int pt3x = x;
            int pt3y = y + rad;

            sdo_Geom = "MDSYS.SDO_GEOMETRY(2003, NULL, NULL,"
                    + "MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,4)," +//circle
                    "MDSYS.SDO_ORDINATE_ARRAY("
                    + pt1x + "," + pt1y + ","
                    + pt2x + "," + pt2y + ","
                    + pt3x + "," + pt3y + "))";
            //Students INTERSECTING/INSIDE this announcement system
            String surroundingStudentsQuery = "SELECT person_id,s_point FROM STUDENTS WHERE "
                    + "SDO_RELATE(s_point," + sdo_Geom + ",'mask=ANYINTERACT') = 'TRUE'";
            //system.out.println("\nSTUDENTS Range Query:\n" + surroundingStudentsQuery);
            mainResultSet = mainStatement.executeQuery(surroundingStudentsQuery);
            executedQueries.add(surroundingStudentsQuery);
            //system.out.println("INTERSECTING/INSIDE Students are:");
            ArrayList<Student> studList = getStudents();
            hm.put("studList", studList);
            //system.out.println("\n **** SurroundingStudents Queries END **** \n");
            return hm;
        } catch (Exception e) {
            System.out.println(" Error in SurroundingStudentsQuery : " + e.toString());
            System.exit(-1);
        }
        return hm;

    }

    public HashMap<String, ArrayList> RangeQuery(ArrayList<Integer> polyList) {
        int numberOFVertices = polyList.size() / 2;//if less than 3 then not a polygon
        double polyCoords[] = new double[polyList.size()];//{200,100, 350,150, 230, 300, 50, 180};
        for (int i = 0; i < polyList.size(); i++) {
            polyCoords[i] = (double) polyList.get(i);
        }

        double firstX = polyCoords[0];
        double firstY = polyCoords[1];
        HashMap<String, ArrayList> hm = new HashMap<String, ArrayList>();
        String sdo_Geom = "MDSYS.SDO_GEOMETRY(2003, NULL, NULL,"
                + "MDSYS.SDO_ELEM_INFO_ARRAY(1,1003,1)," +//one polygon (exterior polygon ring)
                "MDSYS.SDO_ORDINATE_ARRAY("
                + firstX + "," + firstY + ","; //insert first vertex
        for (int j = 2; j < ((numberOFVertices - 1) * 2) + 2; j += 2) {//loop from all remaining vertices
            sdo_Geom = sdo_Geom + polyCoords[j] + "," + polyCoords[j + 1] + ",";
        }
        sdo_Geom = sdo_Geom + firstX + "," + firstY + "))";


        //system.out.println("\n **** Range Queries Begin **** \n");
        try {
            //INTERSECTING/INSIDE STUDENTS
            //system.out.println("\n **** Range Queries : INTERSECTING/INSIDE STUDENTS **** \n");
            String tableName = "STUDENTS";
            String tableCols = "person_id,s_point";
            String geoCol = "s_point"; // GEOMETRY col
            getINTERSECTING_INSIDEFeatures(sdo_Geom, tableName, tableCols, geoCol);

            //system.out.println("INTERSECTING/INSIDE Students are:");
            ArrayList<Student> studList = getStudents();
            hm.put("students", studList);

            //NEARBY ANNOUNCEMENTSYSTEMS
            //system.out.println("\n **** Range Queries : INTERSECTING/INSIDE ANNOUNCEMENT SYSTEMS **** \n");
            tableName = "announcement_systems";
            tableCols = "as_id,x,y,r,as_circle";
            geoCol = "AS_CIRCLE"; // GEOMETRY col
            getINTERSECTING_INSIDEFeatures(sdo_Geom, tableName, tableCols, geoCol);

            //system.out.println("INTERSECTING/INSIDE Announcement systems are:");
            ArrayList<AnnouncementSystem> asList = getAnnouncementSystems();
            hm.put("as", asList);

            //NEARBY BUILDINGS
            //system.out.println("\n **** Range Queries : INTERSECTING/INSIDE BUILDINGS **** \n");
            tableName = "BUILDINGS";
            tableCols = "building_id,building_name,b_polygon";
            geoCol = "b_polygon"; // GEOMETRY col
            getINTERSECTING_INSIDEFeatures(sdo_Geom, tableName, tableCols, geoCol);

            //system.out.println("INTERSECTING/INSIDE BUILDINGS are:");
            ArrayList<Building> buildingList = getBuildings();
            hm.put("buildings", buildingList);

            //system.out.println("\n **** Range Queries End **** \n");
        } catch (Exception e) {
            System.out.println(" Error in RangeQuery : " + e.toString());
            System.exit(-1);
        }
        return hm;
    }

    public void getINTERSECTING_INSIDEFeatures(String sdo_Geom, String tableName, String tableCols, String geoCol) throws SQLException {
        String rangeQuery = "SELECT " + tableCols + " FROM " + tableName + " WHERE "
                + "SDO_RELATE(" + geoCol + "," + sdo_Geom + ",'mask=ANYINTERACT') = 'TRUE'";
        //system.out.println(tableName + " Range Query:\n" + rangeQuery);
        mainResultSet = mainStatement.executeQuery(rangeQuery);
        executedQueries.add(rangeQuery);
    }

    /*
     * USed to find the features within a range from a point and the nearest of them
     */
    public HashMap<String, ArrayList> PointQuery(int x, int y, int d) {
        HashMap<String, ArrayList> hm = new HashMap<String, ArrayList>();
        //system.out.println("\n **** Point Queries Begin **** \n");
        try {
            //NEARBY STUDENTS
            //system.out.println("\n **** Point Queries : NEARBY STUDENTS **** \n");
            String tableName = "STUDENTS";
            String tableCols = "person_id,s_point,SDO_NN_DISTANCE(1)";
            String geoCol = "s_point"; // GEOMETRY col
            getNearbyFeatures(x, y, d, tableName, tableCols, geoCol);

            //system.out.println("Nearby Students are:");
            ArrayList<Student> studList = getStudents();
            //if (studList != null && !studList.isEmpty()) {
                //system.out.println("Nearest student is:" + studList.get(0).getStudentName() + " with distance:" + studList.get(0).getDistance());
            //}
            hm.put("students", studList);

            //NEARBY ANNOUNCEMENTSYSTEMS
            //system.out.println("\n **** Point Queries : NEARBY ANNOUNCEMENT SYSTEMS **** \n");
            tableName = "announcement_systems";
            tableCols = "as_id,x,y,r,as_circle,SDO_NN_DISTANCE(1)";
            geoCol = "AS_CIRCLE"; // GEOMETRY col
            getNearbyFeatures(x, y, d, tableName, tableCols, geoCol);

            //system.out.println("Nearby Announcement systems are:");
            ArrayList<AnnouncementSystem> asList = getAnnouncementSystems();
            //get the nearest Announcement System
           // if (asList != null && !asList.isEmpty()) {
                //system.out.println("Nearest Announcement System is:" + asList.get(0).getAs_id() + " with distance:" + asList.get(0).getDistance());
           // }
            hm.put("as", asList);

            //NEARBY BUILDINGS
            //system.out.println("\n **** Point Queries : NEARBY BUILDINGS **** \n");
            tableName = "BUILDINGS";
            tableCols = "building_id,building_name,b_polygon,SDO_NN_DISTANCE(1)";
            geoCol = "b_polygon"; // GEOMETRY col
            getNearbyFeatures(x, y, d, tableName, tableCols, geoCol);

            //system.out.println("Nearby BUILDINGS are:");
            ArrayList<Building> buildingList = getBuildings();
            //get the nearest building
           // if (buildingList != null && !buildingList.isEmpty()) {
                //system.out.println("Nearest building is:" + buildingList.get(0).getBuildingID() + " with distance:" + buildingList.get(0).getDistance());
           // }
            hm.put("buildings", buildingList);

            //system.out.println("\n **** Point Queries End **** \n");
        } catch (Exception e) {
            System.out.println(" Error in PointQuery : " + e.toString());
            System.exit(-1);
        }
        return hm;
    }

    private void getNearbyFeatures(int x, int y, int d, String tableName,
            String tableCols, String geoCol) throws SQLException {
        String sdo_Geom = "SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(" + x + "," + y + ",NULL),NULL,NULL)";
        //get number of features that are within radius
        String countQuery = "SELECT count(" + geoCol + ") FROM " + tableName + " WHERE "
                + "sdo_within_distance(" + geoCol + "," + sdo_Geom + ",'distance=" + d + "') = 'TRUE'";
        //system.out.println(tableName + " Count Query:\n" + countQuery);
        
        mainResultSet = mainStatement.executeQuery(countQuery);
        executedQueries.add(countQuery);
        mainResultSet.next();
        int cnt = mainResultSet.getInt(1);
        //system.out.println("Number of Nearby " + tableName + " count:" + cnt);
        //get the features and their distances
        String featureDistQuery = "SELECT " + tableCols + " FROM " + tableName + " WHERE "
                + "SDO_NN(" + geoCol + "," + sdo_Geom + ",'sdo_num_res=" + cnt + "',1) = 'TRUE' ORDER BY SDO_NN_DISTANCE(1)";
        //system.out.println("featuresDistQuery:\n" + featureDistQuery);
        mainResultSet = mainStatement.executeQuery(featureDistQuery);
        executedQueries.add(featureDistQuery);
    }

    public HashMap<String, ArrayList> WholeRegionQuery() {
        HashMap<String, ArrayList> hm = new HashMap<String, ArrayList>();
        //system.out.println("\n **** Whole Region Queries Begin **** \n");
        //system.out.println("\n ** Whole Region Queries : getALLSTUDENTS ** ");
        hm.put("students", ShowAllStudents());
        //system.out.println("\n ** Whole Region Queries : getALLANNOUNCEMENTSYSTEMS ** \n");
        hm.put("as", ShowAllAnnouncementSystems());
        //system.out.println("\n ** Whole Region Queries : getALLBUILDINGS ** \n");
        hm.put("buildings", ShowAllBuildings());
        //system.out.println("\n **** Whole Region Queries End **** \n");
        return hm;
    }

    public ArrayList<Building> ShowAllBuildings() {
        ArrayList<Building> buildList = null;
        String query="select building_id,building_name,b_polygon from BUILDINGS ";
        try {
            mainResultSet = mainStatement.executeQuery(query);
            buildList = getBuildings();
            executedQueries.add(query);
        } catch (Exception e) {
            System.out.println(" Error in ShowAllBuildings : " + e.toString());
            System.exit(-1);
        }
        return buildList;
    }

    private ArrayList<Building> getBuildings() throws SQLException, InvalidGeometryException,
            GeometryInputTypeNotSupportedException {
        STRUCT point;
        Geometry geom;
        @SuppressWarnings("deprecation")
        GeometryAdapter sdoAdapter = OraSpatialManager.getGeometryAdapter("SDO", "9", STRUCT.class, null, null, mainConnection);
        ArrayList<Building> buildings = new ArrayList<Building>();

        while (mainResultSet.next()) {
            Building b = new Building();
            String building_ID = mainResultSet.getString(1);
            b.setBuildingID(building_ID);
            //system.out.print("\"" + building_ID + "\",");
            String buildingName = mainResultSet.getString(2);
            b.setBuildingName(buildingName);
            //system.out.print("\"" + buildingName + "\",");

            point = (STRUCT) mainResultSet.getObject(3);
            geom = sdoAdapter.importGeometry(point);
            if ((geom instanceof oracle.sdoapi.geom.Polygon))//polygon building
            {
                oracle.sdoapi.geom.Polygon poly = (oracle.sdoapi.geom.Polygon) geom;
                oracle.sdoapi.geom.CurveString cs = poly.getExteriorRing();
                oracle.sdoapi.geom.LineString line = (oracle.sdoapi.geom.LineString) cs;
                double[] coords = line.getCoordArray();
                b.setCoords(coords);
                //for (int i = 0; i < coords.length; i += 2) {
                    //system.out.print("\"(X = " + coords[i] + ", Y = " + coords[i + 1] + ")\"");
               // }
            }
            if (mainResultSet.getMetaData().getColumnCount() == 4) {
                double distance = mainResultSet.getDouble(4);
                b.setDistance(distance);
                //system.out.print(" " + distance + " ");
            }
            buildings.add(b);
            //system.out.println();
        }
        return buildings;
    }

    public ArrayList<AnnouncementSystem> ShowAllAnnouncementSystems() {
        ArrayList<AnnouncementSystem> announcementSystems = null;
        String query="select as_id,x,y,r,as_circle from announcement_systems";
        try {
            mainResultSet = mainStatement.executeQuery(query);
            executedQueries.add(query);
            announcementSystems = getAnnouncementSystems();
        } catch (Exception e) {
            System.out.println(" Error in ShowAllAnnouncementSystems : " + e.toString());
            System.exit(-1);
        }
        return announcementSystems;
    }

    private ArrayList<AnnouncementSystem> getAnnouncementSystems() throws SQLException,
            InvalidGeometryException, GeometryInputTypeNotSupportedException {
        STRUCT point;
        Geometry geom;
        @SuppressWarnings("deprecation")
        GeometryAdapter sdoAdapter = OraSpatialManager.getGeometryAdapter("SDO", "9", STRUCT.class, null, null, mainConnection);
        ArrayList<AnnouncementSystem> announcementSystems = new ArrayList<AnnouncementSystem>();
        while (mainResultSet.next()) {
            AnnouncementSystem as = new AnnouncementSystem();
            String as_ID = mainResultSet.getString(1);
            as.setAs_id(as_ID);
            //system.out.print("\"" + as_ID + "\",");
            int x = mainResultSet.getInt(2);
            //system.out.print("\"" + x + "\",");
            as.setX(x);
            int y = mainResultSet.getInt(3);
            //system.out.print("\"" + y + "\",");
            as.setY(y);
            int r = mainResultSet.getInt(4);
            //system.out.print("\"" + r + "\",");
            as.setR(r);
            point = (STRUCT) mainResultSet.getObject(5);
            geom = sdoAdapter.importGeometry(point);
            if ((geom instanceof oracle.sdoapi.geom.CurvePolygon))//circle
            {
                oracle.sdoapi.geom.CurvePolygon curvePoly = (oracle.sdoapi.geom.CurvePolygon) geom;
                oracle.sdoapi.geom.CurveString cs = curvePoly.getExteriorRing();
                CoordPoint[] cp = cs.getPointArray();
                //for (int i = 0; i < cp.length; i++) {
                    //system.out.print("\"(X = " + cp[i].getX() + ", Y = " + cp[i].getY() + ")\"");
               // }
            }
            if (mainResultSet.getMetaData().getColumnCount() == 6) {
                double distance = mainResultSet.getDouble(6);
                as.setDistance(distance);
                //system.out.print(" " + distance + " ");
            }
            announcementSystems.add(as);
            //system.out.println();
        }
        return announcementSystems;
    }

    public ArrayList<Student> ShowAllStudents() {
        ArrayList<Student> studList = null;
        String query="select person_id,s_point from STUDENTS";
       
        try {
            mainResultSet = mainStatement.executeQuery(query);
            studList = getStudents();
            executedQueries.add(query);
        } catch (Exception e) {
            System.out.println(" Error in ShowAllStudents : " + e.toString());
            System.exit(-1);
        }
        return studList;

    }

    private ArrayList<Student> getStudents() throws SQLException, InvalidGeometryException,
            GeometryInputTypeNotSupportedException {
        STRUCT point;
        Geometry geom;
        @SuppressWarnings("deprecation")
        GeometryAdapter sdoAdapter = OraSpatialManager.getGeometryAdapter("SDO", "9", STRUCT.class, null, null, mainConnection);
        ArrayList<Student> students = new ArrayList<Student>();
        while (mainResultSet.next()) {
            Student s = new Student();
            String studentName = mainResultSet.getString(1);
            s.setStudentName(studentName);
            //system.out.print(studentName + " ");
            point = (STRUCT) mainResultSet.getObject(2);
            geom = sdoAdapter.importGeometry(point);
            if ((geom instanceof oracle.sdoapi.geom.Point)) {
                oracle.sdoapi.geom.Point point0 = (oracle.sdoapi.geom.Point) geom;
                double X = point0.getX();
                double Y = point0.getY();
                //system.out.print("\"(X = " + X + ", Y = " + Y + ")\"");
                //s.setX(X);
                //s.setY(Y);
                s.setXY(point0);
            }
            if (mainResultSet.getMetaData().getColumnCount() == 3) {
                double distance = mainResultSet.getDouble(3);
                s.setDistance(distance);
                //system.out.print(" " + distance + " ");
            }
            students.add(s);
            //system.out.println();
        }
        return students;
    }

    public void ConnectToDB() {
        try {
            // loading Oracle Driver
            System.out.print("Looking for Oracle's jdbc-odbc driver ... ");
            DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
            System.out.println(", Loaded.");

			 String URL = "jdbc:oracle:thin:@localhost:1521:hw2";
            String userName = "system";
            String password = "hw2";
			
            

            System.out.print("Connecting to DB...");
            mainConnection = DriverManager.getConnection(URL, userName, password);
            System.out.println(", Connected!");

            mainStatement = mainConnection.createStatement();

        } catch (Exception e) {
            System.out.println("Error while connecting to DB: " + e.toString());
            System.exit(-1);
        }

    }

    public void CloseConnection() {
        try {
            mainConnection.close();
        } catch (SQLException e) {
            System.out.println("Error in close connection: " + e.toString());
        }
    }
}
class Student {

    private String studentName;
    //private double x;
    //private double y;
    private oracle.sdoapi.geom.Point xy;
    private double distance;

    public String getStudentName() {
        return studentName;
    }

    public void setStudentName(String studentName) {
        this.studentName = studentName;
    }
    /*public double getX() {
     return x;
     }
     public void setX(double x) {
     this.x = x;
     }
     public double getY() {
     return y;
     }
     public void setY(double y) {
     this.y = y;
     }*/

    public double getDistance() {
        return distance;
    }

    public oracle.sdoapi.geom.Point getXY() {
        return xy;
    }

    public void setXY(oracle.sdoapi.geom.Point xy) {
        this.xy = xy;
    }

    public void setDistance(double distance) {
        this.distance = distance;
    }
}

class AnnouncementSystem {

    private String as_id;
    private int x, y, r;
    private double distance;

    public String getAs_id() {
        return as_id;
    }

    public void setAs_id(String as_id) {
        this.as_id = as_id;
    }

    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    public int getR() {
        return r;
    }

    public void setR(int r) {
        this.r = r;
    }

    public double getDistance() {
        return distance;
    }

    public void setDistance(double distance) {
        this.distance = distance;
    }
}

class Building {

    String buildingID;
    String buildingName;
    double[] coords;
    double distance;

    public String getBuildingID() {
        return buildingID;
    }

    public void setBuildingID(String buildingID) {
        this.buildingID = buildingID;
    }

    public String getBuildingName() {
        return buildingName;
    }

    public void setBuildingName(String buildingName) {
        this.buildingName = buildingName;
    }

    public double[] getCoords() {
        return coords;
    }

    public void setCoords(double[] coords) {
        this.coords = coords;
    }

    public double getDistance() {
        return distance;
    }

    public void setDistance(double distance) {
        this.distance = distance;
    }
}